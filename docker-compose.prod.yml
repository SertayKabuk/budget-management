version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: budget-backend-prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=3001
    volumes:
      - backend-uploads:/app/uploads
    labels:
      # You will configure these Traefik labels for your production domain
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"
      # Enable CORS headers if needed
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolalloworiginlist=${FRONTEND_URL}"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.routers.backend.middlewares=backend-cors"
    networks:
      - budget-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); }).on('error', () => { process.exit(1); });"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${BACKEND_URL}
        - VITE_WS_URL=${BACKEND_WS_URL}
    container_name: budget-frontend-prod
    restart: unless-stopped
    labels:
      # You will configure these Traefik labels for your production domain
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`yourdomain.com`) || Host(`www.yourdomain.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # Redirect www to non-www (optional)
      - "traefik.http.middlewares.frontend-redirect.redirectregex.regex=^https://www\\.(.+)"
      - "traefik.http.middlewares.frontend-redirect.redirectregex.replacement=https://$${1}"
      - "traefik.http.routers.frontend.middlewares=frontend-redirect"
    networks:
      - budget-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  budget-network:
    driver: bridge

volumes:
  backend-uploads:
    driver: local
