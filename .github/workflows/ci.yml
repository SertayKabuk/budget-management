name: CI - Tests and Linting

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  backend-lint-and-test:
    name: Backend - Lint & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_budget_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Run Prisma migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_budget_db
        run: npx prisma migrate deploy

      - name: Lint backend code
        working-directory: ./backend
        run: npm run lint --if-present || echo "No lint script found"

      - name: Type check backend
        working-directory: ./backend
        run: npx tsc --noEmit

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_budget_db
          JWT_SECRET: test_jwt_secret
          NODE_ENV: test
        run: npm test --if-present || echo "No tests configured yet"

  frontend-lint-and-test:
    name: Frontend - Lint & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint --if-present || echo "No lint script found"

      - name: Type check frontend
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test --if-present || echo "No tests configured yet"

      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_URL: http://localhost:3001
          VITE_WS_URL: ws://localhost:3001
        run: npm run build

  backend-build:
    name: Backend - Build Check
    runs-on: ubuntu-latest
    needs: backend-lint-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Build backend
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_budget_db
        run: npm run build

      - name: Check build artifacts
        working-directory: ./backend
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          echo "Build successful: dist directory exists"
