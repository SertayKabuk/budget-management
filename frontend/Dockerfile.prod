# Frontend Dockerfile - Production
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies (includes devDependencies needed for build)
RUN npm ci

# Copy all source files (.dockerignore will exclude unnecessary files)
COPY . .

# Build the application - no build-time env vars needed anymore
RUN npm run build

# Production stage with nginx
FROM nginx:alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Copy custom nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built assets from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy config template and entrypoint script for runtime configuration
COPY config.template.js /usr/share/nginx/html/config.template.js
COPY env.sh /docker-entrypoint.d/env.sh

# Make entrypoint script executable
RUN chmod +x /docker-entrypoint.d/env.sh

# Create non-root user for nginx
RUN addgroup -g 1001 -S nginx-custom && \
    adduser -S nginx-custom -u 1001 && \
    chown -R nginx-custom:nginx-custom /usr/share/nginx/html && \
    chown -R nginx-custom:nginx-custom /var/cache/nginx && \
    chown -R nginx-custom:nginx-custom /var/log/nginx && \
    touch /var/run/nginx.pid && \
    chown -R nginx-custom:nginx-custom /var/run/nginx.pid

# Switch to non-root user
USER nginx-custom

# Expose port
EXPOSE 8080

# Environment variables will be injected at runtime
ENV VITE_API_URL=http://localhost:3001
ENV VITE_WS_URL=ws://localhost:3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:8080/ || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start nginx (entrypoint script runs automatically via /docker-entrypoint.d/)
CMD ["nginx", "-g", "daemon off;"]
